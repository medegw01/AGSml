(* Generated by testfest module sml.natural.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Bignum : BIGNUM) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Bignum
    val /+/ = <+>   val /-/ = <->   val /*/ = <*>
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = N.toString
  val intString = N.toString
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 4 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "4"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 15 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "15"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 575 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "575"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 10269049732 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "10269049732"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 208431867784491997933 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "208431867784491997933"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a LargeInteger with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 246601297107900000 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./+/ (N.ofInt (535), N./*/ (N.ofInt (1000), N.ofInt (0))), N./*/ (N./+/ (N.ofInt (890), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (978), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./*/ (N./+/ (N./+/ (N.ofInt (293), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (709), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (604), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (875), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "246601297107900000"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 186138286352 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./+/ (N./+/ (N.ofInt (564), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (922), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (882), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (938), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (542), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (498), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (361), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (373), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./+/ (N.ofInt (244), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (285), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "186138286352"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 158673173646266067443805221617308323578244179950 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./*/ (N./+/ (N.ofInt (934), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (750), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (767), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (711), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (199), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (579), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (471), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (485), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N.ofInt (57), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (719), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (381), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (201), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N./+/ (N./+/ (N.ofInt (485), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (699), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (658), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (449), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (240), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (95), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (289), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (312), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N./+/ (N.ofInt (237), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (171), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (700), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (602), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (513), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (168), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (596), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (915), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "158673173646266067443805221617308323578244179950"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -718 - -393 = -325 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (718), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (393), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-325"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 4518 - 634817 = -630299 "
                                (fn () => (intString (N./-/ (N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (4), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (817), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (634), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-630299"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -565672288641 - 772698317145 = -1338370605786 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (641), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (288), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (672), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (565), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N.ofInt (145), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (317), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (698), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (772), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-1338370605786"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 226365711282354930 using literals, *, and +"
                                (fn () => (natString (N./*/ (N./*/ (N./*/ (N./+/ (N.ofInt (817), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (943), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (698), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (871), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./-/ (N./*/ (N./+/ (N.ofInt (891), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (542), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (363), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "226365711282354930"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -384379398700 using literals, *, and +"
                                (fn () => (intString (N./-/ (N./*/ (N./-/ (N./+/ (N.ofInt (606), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (166), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (475), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (567), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N./+/ (N.ofInt (616), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (129), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (248), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (829), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./-/ (N./+/ (N.ofInt (359), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (400), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (525), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (145), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-384379398700"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 186687445064371438476361449912626679074847432864 using literals, *, and +"
                                (fn () => (natString (N./*/ (N.negated (N./+/ (N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (40), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (351), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (432), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (771), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (868), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (469), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (530), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))), N./*/ (N.negated (N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (268), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (805), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (371), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (34), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (763), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (35), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (653), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (696), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (543), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (577), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "186687445064371438476361449912626679074847432864"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -395 = 464 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (395), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (464), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -736 = 766 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (736), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (766), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 277455 = -137262 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (455), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (277), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (262), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (137), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -107 != -68 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (107), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (68), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 116 != 279 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (116), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (279), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 222984 != 351091 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (984), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (222), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (91), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (351), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -873 < 934 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (873), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (934), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 739 < -620 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (739), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (620), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 321761 < -900636 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (761), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (321), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (636), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (900), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -509 > -938 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (509), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (938), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -153 > -526 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (153), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (526), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -516943 > -812771 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (943), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (516), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (771), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (812), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -902 <= -8 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (902), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (8), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 205 <= -742 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (205), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (742), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 398001 <= -161434 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (1), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (398), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (161), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -469 >= 565 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (469), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (565), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 254 >= 787 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (254), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (787), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -128945 >= 933200 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (945), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (128), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (200), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (933), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -893 = -893 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (893), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (893), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -342 = -342 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (342), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (342), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 975737 = 975737 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (737), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (975), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (737), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (975), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 693 != 693 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (693), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (693), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -563 != -563 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (563), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (563), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -80138 != -80138 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (138), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (80), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (138), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (80), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -252 < -252 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (252), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (252), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -800 < -800 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (800), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (800), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -759450 < -759450 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (450), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (759), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (450), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (759), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 38 > 38 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (38), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (38), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -11 > -11 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 427832 > 427832 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (832), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (427), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (832), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (427), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -677 <= -677 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (677), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (677), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 682 <= 682 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (682), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (682), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 593702 <= 593702 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (702), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (593), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (702), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (593), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 301 >= 301 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (301), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (301), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -490 >= -490 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (490), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (490), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -787417 >= -787417 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (787), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (787), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 763639 = 960 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (639), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (763), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (960), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 861996 = -613 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (996), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (861), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (613), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 118414287807646830 = 100 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (830), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (646), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (807), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (287), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (118), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (100), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 939812 != -929 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (812), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (939), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (929), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 13958 != 238 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (958), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (13), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (238), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -391218694260326992 != -957 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (992), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (326), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (260), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (694), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (218), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (391), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N.negated (N./+/ (N.ofInt (957), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 151886 < 759 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (151), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (759), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 860313 < 828 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (313), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (860), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (828), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -310877844242630605 < -388 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (605), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (630), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (242), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (844), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (877), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (310), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N.negated (N./+/ (N.ofInt (388), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -454125 > -314 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (125), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (454), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (314), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 925177 > -465 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (177), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (925), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (465), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 765816232655473202 > 182 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (202), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (473), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (655), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (232), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (816), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (765), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (182), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 233426 <= -494 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (426), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (494), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 351258 <= -722 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (258), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (351), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (722), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 975304253554135168 <= 995 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (168), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (135), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (554), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (253), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (304), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (975), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (995), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 703157 >= 901 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (157), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (703), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -354389 >= 614 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (389), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (354), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (614), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 247506072827782130 >= -218 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (782), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (827), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (72), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (506), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (247), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N.negated (N./+/ (N.ofInt (218), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
        

   in 
      Unit.report()
   end

end
