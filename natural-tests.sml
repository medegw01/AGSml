(* Generated by testfest module sml.natural.  Use me to create tests
   for use with the Unit module *)

functor UnitTestsFun(structure Natural : NATURAL) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Natural
    
    fun negated n = op /-/ (ofInt 0, n)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  val intString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 4 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "4"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 6 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "6"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 747 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "747"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 1822764901 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "1822764901"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 927955204109072220850 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "927955204109072220850"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a Natural with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 41497 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./*/ (N./+/ (N.ofInt (541), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (73), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N./+/ (N.ofInt (587), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (531), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "41497"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 701318568448 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./*/ (N./+/ (N.ofInt (576), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (958), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (731), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N./+/ (N.ofInt (196), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (441), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (504), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (875), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./+/ (N.ofInt (324), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (44), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "701318568448"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 288931983856 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (856), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (983), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (931), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (288), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "288931983856"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 611 - 266 = 345 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (611), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (266), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "345"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 741569 - 47876 = 693693 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (569), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (741), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (876), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (47), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "693693"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 956286269381 - 898590063158 = 57696206223 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (381), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (269), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (286), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (956), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (158), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (63), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (590), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (898), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "57696206223"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 690 = 792 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (690), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (792), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 477 = 264 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (477), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (264), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 357822 = 997676 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (822), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (357), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (676), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (997), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 284 != 623 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (284), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (623), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 684 != 51 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (684), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (51), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 788490 != 447071 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (490), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (788), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (71), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (447), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 118 < 804 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (118), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (804), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 760 < 905 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (760), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (905), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 342216 < 122434 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (216), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (342), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (122), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 193 > 458 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (193), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (458), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 208 > 265 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (208), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (265), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 155835 > 480801 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (835), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (155), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 680 <= 156 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (680), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (156), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 533 <= 602 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (533), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (602), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 686712 <= 240552 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (712), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (686), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (552), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (240), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 103 >= 902 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (103), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (902), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 868 >= 861 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (868), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (861), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 936999 >= 681512 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (999), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (936), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (512), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (681), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 842 = 842 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (842), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (842), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 801 = 801 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 928853 = 928853 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (853), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (928), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (853), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (928), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 318 != 318 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 804 != 804 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (804), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (804), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 958347 != 958347 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (347), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (958), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (347), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (958), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 146 < 146 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 901 < 901 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 977130 < 977130 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (977), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (977), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 972 > 972 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (972), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (972), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 147 > 147 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (147), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 878624 > 878624 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (878), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (878), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 641 <= 641 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (641), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (641), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 643 <= 643 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (643), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (643), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 215802 <= 215802 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (802), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (215), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (802), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (215), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 445 >= 445 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (445), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (445), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 146 >= 146 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (146), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 503725 >= 503725 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (725), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (503), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (725), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (503), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 91078 = 123 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (78), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (91), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (123), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 113262 = 51 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (262), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (113), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (51), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 125006576621050949 = 142 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (949), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (50), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (621), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (576), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (6), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (125), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (142), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 301448 != 56 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (448), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (301), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (56), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 628659 != 81 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (659), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (628), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (81), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 829494211373446414 != 243 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (446), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (373), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (211), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (494), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (829), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (243), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 516391 < 831 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (391), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (516), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (831), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 170130 < 422 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (130), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (170), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (422), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 920452980029601930 < 615 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (930), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (601), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (29), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (980), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (452), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (920), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (615), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 613149 > 132 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (149), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (613), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (132), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 706737 > 929 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (737), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (706), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (929), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 867561354620168290 > 608 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (290), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (168), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (620), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (354), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (561), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (867), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (608), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 169608 <= 323 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (608), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (169), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (323), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 947259 <= 195 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (259), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (947), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (195), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 679959028048938166 <= 770 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (166), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (938), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (48), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (28), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (959), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (679), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (770), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 963392 >= 433 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (392), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (963), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (433), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 805246 >= 127 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (246), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (805), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (127), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 393178683678339074 >= 989 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (74), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (339), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (678), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (683), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (178), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (393), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (989), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 946 div 9 = 105 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (946), N./*/ (N.ofInt (1000), N.ofInt (0))), 9)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "105"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 686270 div 1 = 686270 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (270), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (686), N./*/ (N.ofInt (1000), N.ofInt (0))))), 1)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "686270"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 754829183809 div 8 = 94353647976 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (809), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (183), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (829), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (754), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 8)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "94353647976"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 700 div 10 = 70 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (700), N./*/ (N.ofInt (1000), N.ofInt (0))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "70"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 258501 div 10 = 25850 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (501), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (258), N./*/ (N.ofInt (1000), N.ofInt (0))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "25850"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 482886279687 div 10 = 48288627968 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (687), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (279), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (482), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "48288627968"
        

   in 
      Unit.report() 
   end

end
